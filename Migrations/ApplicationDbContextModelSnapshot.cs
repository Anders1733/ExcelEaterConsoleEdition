// <auto-generated />
using ExcelEaterConsoleEdition.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExcelEaterConsoleEdition.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.CompetencyEntity", b =>
                {
                    b.Property<int>("CompetencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompetencyId"));

                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("SubsectionId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("CompetencyId");

                    b.HasIndex("DirectionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubsectionId");

                    b.HasIndex("TopicId");

                    b.ToTable("Competencies", (string)null);
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.DirectionEntity", b =>
                {
                    b.Property<int>("DirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirectionId");

                    b.ToTable("Directions", (string)null);
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("EmployeeIdInVbpm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.SectionEntity", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.SubsectionEntity", b =>
                {
                    b.Property<int>("SubsectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubsectionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubsectionId");

                    b.ToTable("Subsections", (string)null);
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.TopicEntity", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics", (string)null);
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.UnitEntity", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId");

                    b.ToTable("Units", (string)null);
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.CompetencyEntity", b =>
                {
                    b.HasOne("ExcelEaterConsoleEdition.Entities.DirectionEntity", "Direction")
                        .WithMany("Competencies")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelEaterConsoleEdition.Entities.EmployeeEntity", "Employee")
                        .WithMany("Competencies")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelEaterConsoleEdition.Entities.SectionEntity", "Section")
                        .WithMany("Competencies")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelEaterConsoleEdition.Entities.SubsectionEntity", "Subsection")
                        .WithMany("Competencies")
                        .HasForeignKey("SubsectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelEaterConsoleEdition.Entities.TopicEntity", "Topic")
                        .WithMany("Competencies")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direction");

                    b.Navigation("Employee");

                    b.Navigation("Section");

                    b.Navigation("Subsection");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("ExcelEaterConsoleEdition.Entities.UnitEntity", "Unit")
                        .WithMany("Employees")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.DirectionEntity", b =>
                {
                    b.Navigation("Competencies");
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("Competencies");
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.SectionEntity", b =>
                {
                    b.Navigation("Competencies");
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.SubsectionEntity", b =>
                {
                    b.Navigation("Competencies");
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.TopicEntity", b =>
                {
                    b.Navigation("Competencies");
                });

            modelBuilder.Entity("ExcelEaterConsoleEdition.Entities.UnitEntity", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
